// Define the differential equation dy/dx = x^2 - y
function dydx = myODE(x, y)
    dydx = x^2 - y;
endfunction

// Define initial conditions
x0 = 0;
y0 = 1;

// Define step size
h = 0.1;

// Define the range of x values
x_range = 0:h:2;

// Initialize arrays to store x and y values
x_values = [];
y_values = [];

// Initialize initial values
x_values(1) = x0;
y_values(1) = y0;

// Implement the second-order Runge-Kutta method (Midpoint method)
for i = 2:length(x_range)
    x = x_values(i-1);
    y = y_values(i-1);
    
    // First step using Euler's method
    k1 = h * myODE(x, y);
    y_temp = y + k1/2;
    
    // Second step using Euler's method
    k2 = h * myODE(x + h/2, y_temp);
    
    // Update y using the weighted average of the slopes
    y_new = y + k2;
    
    // Update x and store y
    x_values(i) = x + h;
    y_values(i) = y_new;
end

// Plot the solution
plot(x_values, y_values);
xlabel('x');
ylabel('y');
title('Solution of dy/dx = x^2 - y using the second-order Runge-Kutta method');